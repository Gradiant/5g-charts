kubeVersion: ""
nameOverride: ""
fullnameOverride: ""
commonLabels: {}
commonAnnotations: {}

image:
  registry: docker.io
  repository: openverso/open5gs
  tag: 2.4.8
  ## Specify a imagePullPolicy
  ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
  ## ref: https://kubernetes.io/docs/user-guide/images/#pre-pulling-images
  ##
  pullPolicy: IfNotPresent
  ## Optionally specify an array of imagePullSecrets.
  ## Secrets must be manually created in the namespace.
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
  ## e.g:
  ## pullSecrets:
  ##   - myRegistryKeySecretName
  ##
  pullSecrets: []
  ## Enable debug mode
  ##
  debug: false

## @section Open5GS Configuration parameters

amf:
  enabled: true
  config:
    logLevel: info
    mcc: 999
    mnc: 70
    tac: 1
    sst: 1
    sd: "0x111111"
    advancedConfig: {}
  command: []
  args: ["open5gs-amfd"]
  extraEnvVars: []
  replicaCount: 1
  updateStrategy:
    type: RollingUpdate
    rollingUpdate: {}
  schedulerName: ""
  topologySpreadConstraints: []
  priorityClassName: ""
  extraVolumes: []
  extraVolumeMounts: []
  sidecars: []
  initContainers: []
  podLabels: {}
  podAnnotations: {}
  affinity: {}
  nodeSelector: {}
  tolerations: []
  podSecurityContext:
    enabled: false
    fsGroup: 1001
  containerSecurityContext:
    enabled: false
    runAsUser: 1001
    runAsNonRoot: true
  livenessProbe:
    enabled: true
    tcpSocket:
      port: 7777
    initialDelaySeconds: 120
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1
  readinessProbe:
    enabled: true
    tcpSocket:
      port: 7777
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1
  resources:
  services:
    sctp:
      type: ClusterIP
      protocol: SCTP
      ports:
        - name: ngap
          port: 38412
          targetPort: 38412
          nodePort: ""
      sessionAffinity: None
      sessionAffinityConfig: {}
      clusterIP: ""
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      externalTrafficPolicy: Cluster
      annotations: {}
    tcp:
      type: ClusterIP
      protocol: TCP
      ports:
        - name: sbi
          port: 7777
          targetPort: 7777
          nodePort: ""
        - name: metrics
          port: 9090
          targetPort: 9090
          nodePort: ""
      sessionAffinity: None
      sessionAffinityConfig: {}
      clusterIP: ""
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      externalTrafficPolicy: Cluster
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
        prometheus.io/path: "/metrics"
  metrics:
    serviceMonitor:
      enabled: false
      namespace: ""
      interval: ""
      scrapeTimeout: ""
      selector: {}
      relabelings: []
      metricRelabelings: []
      honorLabels: false
      labels: {}
      jobLabel: ""

ausf:
  enabled: true
  config:
    logLevel: info
    advancedConfig: {}
  command: []
  args: ["open5gs-ausfd"]
  extraEnvVars: []
  replicaCount: 1
  updateStrategy:
    type: RollingUpdate
    rollingUpdate: {}
  schedulerName: ""
  topologySpreadConstraints: []
  priorityClassName: ""
  extraVolumes: []
  extraVolumeMounts: []
  sidecars: []
  initContainers: []
  podLabels: {}
  podAnnotations: {}
  affinity: {}
  nodeSelector: {}
  tolerations: []
  podSecurityContext:
    enabled: false
    fsGroup: 1001
  containerSecurityContext:
    enabled: false
    runAsUser: 1001
    runAsNonRoot: true
  livenessProbe:
    enabled: true
    tcpSocket:
      port: 7777
    initialDelaySeconds: 120
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1
  readinessProbe:
    enabled: true
    tcpSocket:
      port: 7777
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1
  resources:
  services:
    tcp:
      type: ClusterIP
      protocol: TCP
      ports:
        - name: sbi
          port: 7777
          targetPort: 7777
          nodePort: ""
      sessionAffinity: None
      sessionAffinityConfig: {}
      clusterIP: ""
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      externalTrafficPolicy: Cluster
      annotations: {}
  metrics:
    enabled: false

bsf:
  enabled: true
  config:
    logLevel: info
    advancedConfig: {}
  command: []
  args: ["open5gs-bsfd"]
  extraEnvVars: []
  replicaCount: 1
  updateStrategy:
    type: RollingUpdate
    rollingUpdate: {}
  schedulerName: ""
  topologySpreadConstraints: []
  priorityClassName: ""
  extraVolumes: []
  extraVolumeMounts: []
  sidecars: []
  initContainers: []
  podLabels: {}
  podAnnotations: {}
  affinity: {}
  nodeSelector: {}
  tolerations: []
  podSecurityContext:
    enabled: false
    fsGroup: 1001
  containerSecurityContext:
    enabled: false
    runAsUser: 1001
    runAsNonRoot: true
  livenessProbe:
    enabled: true
    tcpSocket:
      port: 7777
    initialDelaySeconds: 120
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1
  readinessProbe:
    enabled: true
    tcpSocket:
      port: 7777
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1
  resources:
  services:
    tcp:
      type: ClusterIP
      protocol: TCP
      ports:
        - name: sbi
          port: 7777
          targetPort: 7777
          nodePort: ""
      sessionAffinity: None
      sessionAffinityConfig: {}
      clusterIP: ""
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      externalTrafficPolicy: Cluster
      annotations: {}
  metrics:
    enabled: false

hss:
  enabled: true
  config:
    logLevel: info
    advancedConfig: {}
  command: []
  args: ["open5gs-hssd"]
  extraEnvVars:
    - name: DB_URI
      value: mongodb://{{ include "common.names.fullname" . }}-mongodb/open5gs
  replicaCount: 1
  updateStrategy:
    type: RollingUpdate
    rollingUpdate: {}
  schedulerName: ""
  topologySpreadConstraints: []
  priorityClassName: ""
  extraVolumes: []
  extraVolumeMounts: []
  sidecars: []
  initContainers: []
  podLabels: {}
  podAnnotations: {}
  affinity: {}
  nodeSelector: {}
  tolerations: []
  podSecurityContext:
    enabled: false
    fsGroup: 1001
  containerSecurityContext:
    enabled: false
    runAsUser: 1001
    runAsNonRoot: true
  livenessProbe:
    enabled: false
  readinessProbe:
    enabled: false
  resources:
  services:
    sctp:
      type: ClusterIP
      protocol: SCTP
      ports:
        - name: s6a
          port: 3868
          targetPort: 3868
          nodePort: ""
      sessionAffinity: None
      sessionAffinityConfig: {}
      clusterIP: ""
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      externalTrafficPolicy: Cluster
      annotations: {}
  metrics:
    enabled: false

mme:
  enabled: true
  config:
    logLevel: info
    mcc: 999
    mnc: 70
    tac: 1
    advancedConfig: {}
  command: []
  args: ["open5gs-mmed"]
  extraEnvVars: []
  replicaCount: 1
  updateStrategy:
    type: RollingUpdate
    rollingUpdate: {}
  schedulerName: ""
  topologySpreadConstraints: []
  priorityClassName: ""
  extraVolumes: []
  extraVolumeMounts: []
  sidecars: []
  initContainers: []
  podLabels: {}
  podAnnotations: {}
  affinity: {}
  nodeSelector: {}
  tolerations: []
  podSecurityContext:
    enabled: false
    fsGroup: 1001
  containerSecurityContext:
    enabled: false
    runAsUser: 1001
    runAsNonRoot: true
  livenessProbe:
    enabled: false
  readinessProbe:
    enabled: false
  resources:
  services:
    udp:
      type: ClusterIP
      protocol: UDP
      ports:
        - name: gtp-c
          port: 2123
          targetPort: 2123
          nodePort: ""
      sessionAffinity: None
      sessionAffinityConfig: {}
      clusterIP: ""
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      externalTrafficPolicy: Cluster
      annotations: {}
    sctp:
      type: ClusterIP
      protocol: SCTP
      ports:
        - name: s1ap
          port: 36412
          targetPort: 36412
          nodePort: ""
        - name: s6a
          port: 3868
          targetPort: 3868
          nodePort: ""
      sessionAffinity: None
      sessionAffinityConfig: {}
      clusterIP: ""
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      externalTrafficPolicy: Cluster
      annotations: {}
  metrics:
    enabled: false

nrf:
  enabled: true
  config:
    logLevel: info
    advancedConfig: {}
  command: []
  args: ["open5gs-nrfd"]
  extraEnvVars: []
  replicaCount: 1
  updateStrategy:
    type: RollingUpdate
    rollingUpdate: {}
  schedulerName: ""
  topologySpreadConstraints: []
  priorityClassName: ""
  extraVolumes: []
  extraVolumeMounts: []
  sidecars: []
  initContainers: []
  podLabels: {}
  podAnnotations: {}
  affinity: {}
  nodeSelector: {}
  tolerations: []
  podSecurityContext:
    enabled: false
    fsGroup: 1001
  containerSecurityContext:
    enabled: false
    runAsUser: 1001
    runAsNonRoot: true
  livenessProbe:
    enabled: true
    tcpSocket:
      port: 7777
    initialDelaySeconds: 120
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1
  readinessProbe:
    enabled: true
    tcpSocket:
      port: 7777
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1
  resources:
  services:
    tcp:
      type: ClusterIP
      protocol: TCP
      ports:
        - name: sbi
          port: 7777
          targetPort: 7777
          nodePort: ""
      sessionAffinity: None
      sessionAffinityConfig: {}
      clusterIP: ""
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      externalTrafficPolicy: Cluster
      annotations: {}
  metrics:
    enabled: false

nssf:
  enabled: true
  config:
    logLevel: info
    nsi:
      sst: 1
      sd: "0x111111"
    advancedConfig: {}
  command: []
  args: ["open5gs-nssfd"]
  extraEnvVars: []
  replicaCount: 1
  updateStrategy:
    type: RollingUpdate
    rollingUpdate: {}
  schedulerName: ""
  topologySpreadConstraints: []
  priorityClassName: ""
  extraVolumes: []
  extraVolumeMounts: []
  sidecars: []
  initContainers: []
  podLabels: {}
  podAnnotations: {}
  affinity: {}
  nodeSelector: {}
  tolerations: []
  podSecurityContext:
    enabled: false
    fsGroup: 1001
  containerSecurityContext:
    enabled: false
    runAsUser: 1001
    runAsNonRoot: true
  livenessProbe:
    enabled: true
    tcpSocket:
      port: 7777
    initialDelaySeconds: 120
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1
  readinessProbe:
    enabled: true
    tcpSocket:
      port: 7777
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1
  resources:
  services:
    tcp:
      type: ClusterIP
      protocol: TCP
      ports:
        - name: sbi
          port: 7777
          targetPort: 7777
          nodePort: ""
      sessionAffinity: None
      sessionAffinityConfig: {}
      clusterIP: ""
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      externalTrafficPolicy: Cluster
      annotations: {}
  metrics:
    enabled: false

pcf:
  enabled: true
  config:
    logLevel: info
    advancedConfig: {}
  command: []
  args: ["open5gs-pcfd"]
  extraEnvVars:
    - name: DB_URI
      value: mongodb://{{ include "common.names.fullname" . }}-mongodb/open5gs
  replicaCount: 1
  updateStrategy:
    type: RollingUpdate
    rollingUpdate: {}
  schedulerName: ""
  topologySpreadConstraints: []
  priorityClassName: ""
  extraVolumes: []
  extraVolumeMounts: []
  sidecars: []
  initContainers: []
  podLabels: {}
  podAnnotations: {}
  affinity: {}
  nodeSelector: {}
  tolerations: []
  podSecurityContext:
    enabled: false
    fsGroup: 1001
  containerSecurityContext:
    enabled: false
    runAsUser: 1001
    runAsNonRoot: true
  livenessProbe:
    enabled: true
    tcpSocket:
      port: 7777
    initialDelaySeconds: 120
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1
  readinessProbe:
    enabled: true
    tcpSocket:
      port: 7777
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1
  resources:
  services:
    tcp:
      type: ClusterIP
      protocol: TCP
      ports:
        - name: sbi
          port: 7777
          targetPort: 7777
          nodePort: ""
      sessionAffinity: None
      sessionAffinityConfig: {}
      clusterIP: ""
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      externalTrafficPolicy: Cluster
      annotations: {}
  metrics:
    enabled: false

pcrf:
  enabled: true
  config:
    logLevel: info
    advancedConfig: {}
  command: []
  args: ["open5gs-pcrfd"]
  extraEnvVars:
    - name: DB_URI
      value: mongodb://{{ include "common.names.fullname" . }}-mongodb/open5gs
  replicaCount: 1
  updateStrategy:
    type: RollingUpdate
    rollingUpdate: {}
  schedulerName: ""
  topologySpreadConstraints: []
  priorityClassName: ""
  extraVolumes: []
  extraVolumeMounts: []
  sidecars: []
  initContainers: []
  podLabels: {}
  podAnnotations: {}
  affinity: {}
  nodeSelector: {}
  tolerations: []
  podSecurityContext:
    enabled: false
    fsGroup: 1001
  containerSecurityContext:
    enabled: false
    runAsUser: 1001
    runAsNonRoot: true
  livenessProbe:
    enabled: false
  readinessProbe:
    enabled: false
  resources:
  services:
    sctp:
      type: ClusterIP
      protocol: SCTP
      ports:
        - name: gx
          port: 3868
          targetPort: 3868
          nodePort: ""
      sessionAffinity: None
      sessionAffinityConfig: {}
      clusterIP: ""
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      externalTrafficPolicy: Cluster
      annotations: {}
  metrics:
    enabled: false

sgwc:
  enabled: true
  config:
    logLevel: info
    advancedConfig: {}
  command: []
  args: ["open5gs-sgwcd"]
  extraEnvVars: []
  replicaCount: 1
  updateStrategy:
    type: RollingUpdate
    rollingUpdate: {}
  schedulerName: ""
  topologySpreadConstraints: []
  priorityClassName: ""
  extraVolumes: []
  extraVolumeMounts: []
  sidecars: []
  initContainers: []
  podLabels: {}
  podAnnotations: {}
  affinity: {}
  nodeSelector: {}
  tolerations: []
  podSecurityContext:
    enabled: false
    fsGroup: 1001
  containerSecurityContext:
    enabled: false
    runAsUser: 1001
    runAsNonRoot: true
  livenessProbe:
    enabled: false
  readinessProbe:
    enabled: false
  resources:
  services:
    udp:
      type: ClusterIP
      protocol: UDP
      ports:
        - name: gtp-c
          port: 2123
          targetPort: 2123
          nodePort: ""
        - name: pfcp
          port: 8805
          targetPort: 8805
          nodePort: ""
      sessionAffinity: None
      sessionAffinityConfig: {}
      clusterIP: ""
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      externalTrafficPolicy: Cluster
      annotations: {}
  metrics:
    enabled: false

sgwu:
  enabled: true
  config:
    logLevel: info
    advertise: ""
    advancedConfig: {}
  command: []
  args: ["open5gs-sgwud"]
  extraEnvVars: []
  replicaCount: 1
  updateStrategy:
    type: RollingUpdate
    rollingUpdate: {}
  schedulerName: ""
  topologySpreadConstraints: []
  priorityClassName: ""
  extraVolumes: []
  extraVolumeMounts: []
  sidecars: []
  initContainers: []
  podLabels: {}
  podAnnotations: {}
  affinity: {}
  nodeSelector: {}
  tolerations: []
  podSecurityContext:
    enabled: false
    fsGroup: 1001
  containerSecurityContext:
    enabled: false
    runAsUser: 1001
    runAsNonRoot: true
  livenessProbe:
    enabled: false
  readinessProbe:
    enabled: false
  resources:
  services:
    udp:
      type: ClusterIP
      protocol: UDP
      ports:
        - name: gtp-c
          port: 2123
          targetPort: 2123
          nodePort: ""
        - name: pfcp
          port: 8805
          targetPort: 8805
          nodePort: ""
      sessionAffinity: None
      sessionAffinityConfig: {}
      clusterIP: ""
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      externalTrafficPolicy: Cluster
      annotations: {}
  metrics:
    enabled: false

smf:
  enabled: true
  config:
    logLevel: info
    pdn:
      addr: 10.45.0.1/16
    advancedConfig: {}
  command: []
  args: ["open5gs-smfd"]
  extraEnvVars: []
  replicaCount: 1
  updateStrategy:
    type: RollingUpdate
    rollingUpdate: {}
  schedulerName: ""
  topologySpreadConstraints: []
  priorityClassName: ""
  extraVolumes: []
  extraVolumeMounts: []
  sidecars: []
  initContainers: []
  podLabels: {}
  podAnnotations: {}
  affinity: {}
  nodeSelector: {}
  tolerations: []
  podSecurityContext:
    enabled: false
    fsGroup: 1001
  containerSecurityContext:
    enabled: false
    runAsUser: 1001
    runAsNonRoot: true
  livenessProbe:
    enabled: true
    tcpSocket:
      port: 7777
    initialDelaySeconds: 120
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1
  readinessProbe:
    enabled: true
    tcpSocket:
      port: 7777
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1
  resources:
  services:
    udp:
      type: ClusterIP
      protocol: UDP
      ports:
        - name: gtp-u
          port: 2152
          targetPort: 2152
          nodePort: ""
        - name: gtp-c
          port: 2123
          targetPort: 2123
          nodePort: ""
        - name: pfcp
          port: 8805
          targetPort: 8805
          nodePort: ""
      sessionAffinity: None
      sessionAffinityConfig: {}
      clusterIP: ""
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      externalTrafficPolicy: Cluster
      annotations: {}
    sctp:
      type: ClusterIP
      protocol: SCTP
      ports:
        - name: s6a
          port: 3868
          targetPort: 3868
          nodePort: ""
      sessionAffinity: None
      sessionAffinityConfig: {}
      clusterIP: ""
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      externalTrafficPolicy: Cluster
      annotations: {}
    tcp:
      type: ClusterIP
      protocol: TCP
      ports:
        - name: sbi
          port: 7777
          targetPort: 7777
          nodePort: ""
        - name: metrics
          port: 9090
          targetPort: 9090
          nodePort: ""
      sessionAffinity: None
      sessionAffinityConfig: {}
      clusterIP: ""
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      externalTrafficPolicy: Cluster
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
        prometheus.io/path: "/metrics"
  metrics:
    serviceMonitor:
      enabled: false
      namespace: ""
      interval: ""
      scrapeTimeout: ""
      selector: {}
      relabelings: []
      metricRelabelings: []
      honorLabels: false
      labels: {}
      jobLabel: ""

udm:
  enabled: true
  config:
    logLevel: info
    advancedConfig: {}
  command: []
  args: ["open5gs-udmd"]
  extraEnvVars: []
  replicaCount: 1
  updateStrategy:
    type: RollingUpdate
    rollingUpdate: {}
  schedulerName: ""
  topologySpreadConstraints: []
  priorityClassName: ""
  extraVolumes: []
  extraVolumeMounts: []
  sidecars: []
  initContainers: []
  podLabels: {}
  podAnnotations: {}
  affinity: {}
  nodeSelector: {}
  tolerations: []
  podSecurityContext:
    enabled: false
    fsGroup: 1001
  containerSecurityContext:
    enabled: false
    runAsUser: 1001
    runAsNonRoot: true
  livenessProbe:
    enabled: true
    tcpSocket:
      port: 7777
    initialDelaySeconds: 120
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1
  readinessProbe:
    enabled: true
    tcpSocket:
      port: 7777
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1
  resources:
  services:
    tcp:
      type: ClusterIP
      protocol: TCP
      ports:
        - name: sbi
          port: 7777
          targetPort: 7777
          nodePort: ""
      sessionAffinity: None
      sessionAffinityConfig: {}
      clusterIP: ""
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      externalTrafficPolicy: Cluster
      annotations: {}
  metrics:
    enabled: false

udr:
  enabled: true
  config:
    logLevel: info
    advancedConfig: {}
  command: []
  args: ["open5gs-udrd"]
  extraEnvVars:
    - name: DB_URI
      value: mongodb://{{ include "common.names.fullname" . }}-mongodb/open5gs
  replicaCount: 1
  updateStrategy:
    type: RollingUpdate
    rollingUpdate: {}
  schedulerName: ""
  topologySpreadConstraints: []
  priorityClassName: ""
  extraVolumes: []
  extraVolumeMounts: []
  sidecars: []
  initContainers: []
  podLabels: {}
  podAnnotations: {}
  affinity: {}
  nodeSelector: {}
  tolerations: []
  podSecurityContext:
    enabled: false
    fsGroup: 1001
  containerSecurityContext:
    enabled: false
    runAsUser: 1001
    runAsNonRoot: true
  livenessProbe:
    enabled: true
    tcpSocket:
      port: 7777
    initialDelaySeconds: 120
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1
  readinessProbe:
    enabled: true
    tcpSocket:
      port: 7777
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1
  resources:
  services:
    tcp:
      type: ClusterIP
      protocol: TCP
      ports:
        - name: sbi
          port: 7777
          targetPort: 7777
          nodePort: ""
      sessionAffinity: None
      sessionAffinityConfig: {}
      clusterIP: ""
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      externalTrafficPolicy: Cluster
      annotations: {}
  metrics:
    enabled: false

upf:
  enabled: true
  config:
    logLevel: info
    pdn:
      addr: 10.45.0.1/16
    dev: eth0  # net1 if multus enabled
    advertise: ""
    advancedConfig: {}
  command: []
  args: ["open5gs-upfd"]
  extraEnvVars:
    - name: IPV4_TUN_SUBNET
      value: 10.45.0.1/16
    - name: IPV4_TUN_ADDR
      value: 10.45.0.1/16
  replicaCount: 1
  updateStrategy:
    type: RollingUpdate
    rollingUpdate: {}
  schedulerName: ""
  topologySpreadConstraints: []
  priorityClassName: ""
  extraVolumes: []
  extraVolumeMounts: []
  sidecars: []
  initContainers: []
  podLabels: {}
  podAnnotations: {
    # k8s.v1.cni.cncf.io/networks: avrodriguez/dataplane-if # uncomment to use Multus
  }
  affinity: {}
  nodeSelector: {}
  tolerations: []
  podSecurityContext:
    enabled: false
    fsGroup: 1001
  containerSecurityContext:
    enabled: true
    privileged: true
    capabilities:
      add: ["NET_ADMIN"]
  livenessProbe:
    enabled: false
  readinessProbe:
    enabled: false
  resources:
  services:
    udp:
      type: ClusterIP
      protocol: UDP
      ports:
        - name: gtp-u
          port: 2152
          targetPort: 2152
          nodePort: ""
        - name: pfcp
          port: 8805
          targetPort: 8805
          nodePort: ""
      sessionAffinity: None
      sessionAffinityConfig: {}
      clusterIP: ""
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      externalTrafficPolicy: Cluster
      annotations: {}
  metrics:
    enabled: false

webui:
  image:
    registry: docker.io
    repository: openverso/open5gs-webui
    tag: 2.4.8
    pullPolicy: IfNotPresent
  enabled: true
  resources: {}
  ingress:
    enabled: true
    certManager: false
    pathType: ImplementationSpecific
    hostname: ""
    path: /
    annotations: {}
    tls: false

mongodb:
  # mongodb.enabled -- set to 'false' to disable automatically deploying dependent charts
  enabled: true
  auth:
    enabled: false

populate:
  enabled: false
  image:
    registry: docker.io
    repository: openverso/open5gs-dbctl
    tag: 0.10.1
    pullPolicy: IfNotPresent
  commands:
  - open5gs-dbctl add 999700000000001 465B5CE8B199B49FAA5F0A2EE238A6BC E8ED289DEBA952E4283B54E88E6183CA  # To use with UERANSIM
